#!/usr/bin/env python
# vim:set ts=4 sw=4 et:
#
# Copyright 2014 Vladimir Ermakov.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

from __future__ import print_function

import sys
import argparse
import threading

import rospy
from mavros.msg import State
from mavros.srv import SetMode, StreamRate


def print_if(cond, *args, **kvargs):
    if cond:
        print(*args, **kvargs)


def fault(*args, **kvargs):
    kvargs['file'] = sys.stderr
    print(*args, **kvargs)
    sys.exit(1)



def do_mode(args):
    rospy.init_node("mavsys", anonymous=True)

    base_mode = 0
    custom_mode = ''

    if args.custom_mode is not None:
        custom_mode = args.custom_mode.upper()
    if args.base_mode is not None:
        base_mode = args.base_mode

    done_evt = threading.Event()
    def state_cb(state):
        print_if(args.verbose, "Current mode:", state.mode)
        if state.mode == custom_mode:
            print("Mode changed.")
            done_evt.set()

    if custom_mode != '' and not custom_mode.isdigit():
        # with correct custom mode we can wait until it changes
        sub = rospy.Subscriber(args.mavros_ns + "/state", State, state_cb)
    else:
        done_evt.set()

    try:
        mode_cl = rospy.ServiceProxy(args.mavros_ns + "/set_mode", SetMode)
        ret = mode_cl(base_mode=base_mode, custom_mode=custom_mode)
    except rospy.ServiceException as ex:
        fault(ex)

    if not ret.success:
        fault("Request failed. Check mavros logs")

    if not done_evt.wait(5):
        fault("Timed out!")



def _set_rate(args, id, rate):
    try:
        rate_cl = rospy.ServiceProxy(args.mavros_ns + "/set_stream_rate", StreamRate)
        rate_cl(stream_id=id, message_rate=rate, on_off=(rate != 0))
    except rospy.ServiceException as ex:
        fault(ex)


def do_rate(args):
    rospy.init_node("mavsys", anonymous=True)



def main():
    parser = argparse.ArgumentParser(description="Chnage mode and rate on MAVLink device.")
    parser.add_argument('-n', '--mavros-ns', help="ROS node namespace", default="/mavros")
    parser.add_argument('-v', '--verbose', action='store_true', help="verbose output")
    subarg = parser.add_subparsers()

    mode_args = subarg.add_parser('mode', help="Set mode")
    mode_args.set_defaults(func=do_mode)
    mode_group = mode_args.add_mutually_exclusive_group(required=True)
    mode_group.add_argument('-b', '--base-mode', type=int, help="Base mode code")
    mode_group.add_argument('-c', '--custom-mode', type=str, help="Custom mode string (same as in ~/state topic)")

    rate_args = subarg.add_parser('rate', help="Set stream rate")
    rate_args.set_defaults(func=do_rate)

    args = parser.parse_args(rospy.myargv(argv=sys.argv)[1:])
    args.func(args)


if __name__ == '__main__':
    main()
